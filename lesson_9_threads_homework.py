""""Необходимо создать два параллельных потока, каждый из которых выводил бы на экран числа от 10 до 1 в
обратном порядке с интервалом в одну секунду.
В выводе должно быть понятно какая нить выполняется, и когда каждая из них начинает и заканчивает своё выполнение"""

import threading

numbers = list(range(1, 11))
def rev():
    print(numbers[::-1])

t1=threading.Thread(target = rev)
print('\nПервый поток начал выполнение!')
t1.start()
t1.join()
print('Первый поток выполнен!')

t2 =threading.Timer(1, rev)
print('\nВторой поток начал выполнение!')
t2.start()
t2.join()
print("Второй поток выполнен!")

"""
В Вашем решение отсутствует одновременное параллельное выполнение двух потоков по выводу каждого числа с интервалом в 1 секунду. 

В данный момент первый поток единожды выводит список значений, завершает выполнение t1.join() и только после завершения, через 1 секунду Timer(1, rev) запускается второй поток t2.start() с выводом списка в функции rev. Использование print'ов сделано верно, для наглядности, когда какой поток выполняется можно передавать в функцию аргументы с помощью args=(1,) и взаимодействовать с ним в функции rev. 

Измененное решение прикладываю ниже:

import threading
import time

def rev(thread_num):
    print(f'Поток №{thread_num} начал выполнение!')
    for index in range(10, 0, -1):
        print(f'Поток: {thread_num} -> {index}')
        time.sleep(1.1)
    print(f'Поток №{thread_num} выполнен!')

t1=threading.Thread(target=rev, args=(1,))
t1.start()

t2 =threading.Timer(1, rev, args=(2,))
t2.start()

t1.join()
t2.join()
print("Все потоки выполнены!")
"""
